/*Step 14*/
/*       You have styled three elements by writing CSS inside the style tags. This works, but since there will be many more styles, it's best to put all the styles in a separate file and link to it.*/

/*We have created a separate styles.css file for you and switched the editor view to that file. You can change between files with the tabs at the top of the editor.*/

/*Start by rewriting the styles you have created into the styles.css file. Make sure to exclude the opening and closing style tags.*/

h1, h2, p {
    text-align: center;
}

/*Step 18*/
/*       The text is centered again so the link to the CSS file is working. Add another style to the file that changes the background-color property to brown for the body element.*/

/*body {*/
/*    background-color: brown;*/
/*}*/

/*Step 19*/
/*       That brown background makes it hard to read the text. Change the body element's background color to be burlywood so it has some color but you are still be able to read the text.*/

/*body {*/
/*    background-color: burlywood;*/
/*}*/

/*Step 21*/
/*The goal now is to make the div not take up the entire width of the page. The CSS width property is perfect for this.*/

/*You can use the id selector to target a specific element with an id attribute. An id selector is defined by placing the hash symbol # directly in front of the element's id value. For example, if an element has the id of cat then you would target that element like this:*/

/*#cat {*/
/*    width: 250px;*/
/*}*/
/*Use the #menu selector to give your element a width of 300px.*/

/*#menu {*/
/*    width: 300px;*/
/*}*/

/*Step 22*/
/*Comments in CSS look like this:*/

/*    !* comment here *!*/
/*In your style sheet, comment out the line containing the background-color property and value, so you can see the effect of only styling the #menu element. This will make the background white again.*/

body {
    /*
    background-color: burlywood;
    */
}

/*Step 23*/
/*Now use the existing #menu selector to set the background color of the div element to be burlywood.*/

/*#menu {*/
/*    width: 300px;*/
/*    background-color: burlywood;*/
/*}*/

/*Step 24*/
/*Now it's easy to see that the text is centered inside the #menu element. Currently, the width of the #menu element is specified in pixels (px).*/

/*Change the width property's value to be 80%, to make it 80% the width of its parent element (body).*/

/*#menu {*/
/*    width: 80%;*/
/*    background-color: burlywood;*/
/*}*/

/*Step 25*/
/*Next, you want to center the #menu horizontally. You can do this by setting its margin-left and margin-right properties to auto. Think of the margin as invisible space around an element. Using these two margin properties, center the #menu element within the body element.*/

/*#menu {*/
/*    margin-left: auto;*/
/*    margin-right: auto;*/
/*}*/

/*Step 26*/
/*So far you have been using type and id selectors to style elements. However, it is more common to use a different selector to style your elements.*/

/*A class selector is defined by a name with a dot directly in front of it, like this:*/

/*.class-name {*/
/*    styles*/
/*}*/
/*Change the existing #menu selector into a class selector by replacing #menu with a class named .menu.*/

/*Step 53*/
/*You can give your menu some space between the content and the sides with various padding properties.*/

/*Give the menu class a padding-left and a padding-right with the same value 20px.*/

/*Step 54*/
/*That looks better. Now try to add the same 20px padding to the top and bottom of the menu.*/

/*.menu {*/
/*    width: 80%;*/
/*    background-color: burlywood;*/
/*    margin-left: auto;*/
/*    margin-right: auto;*/
/*    padding-left: 20px;*/
/*    padding-right: 20px;*/
/*    padding-top: 20px;*/
/*    padding-bottom: 20px;*/
/*}*/

/*Step 28*/
/*Since the cafe's main product for sale is coffee, you could use an image of coffee beans for the background of the page.*/

/*Delete the comment and its contents inside the body type selector. Now add a background-image property and set its value to url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg).*/

/*Step 57*/
/*You can change the font-family of text, to make it look different from the default font of your browser. Each browser has some common fonts available to it.*/

/*Change all the text in your body, by adding a font-family property with the value sans-serif. This is a fairly common font that is very readable.*/

body {

    background-image: url(https://cdn.freecodecamp.org/curriculum/css-cafe/beans.jpg);
    font-family: sans-serif;
}

/*Step 33*/
/*Using your new flavor class as a selector, set the text-align property's value to left.*/

/*.flavor {*/
/*    text-align: left;*/
/*}*/
/*Step 35*/
/*Now align the text to the right for the elements with the price class.*/

/*.price {*/
/*    text-align: right;*/
/*}*/

/*Step 37*/
/*The p elements are nested in an article element with the class attribute of item. You can style all the p elements nested anywhere in elements with a class named item like this:*/

/*.item p { }*/
/*Using the above selector, add a display property with value inline-block so the p elements behave more like inline elements.*/

.item p {
    display: inline-block;
}
/*Step 38*/
/*That's closer, but the price didn't stay over on the right. This is because inline-block elements only take up the width of their content. To spread them out, add a width property to the flavor and price class selectors that have a value of 50% each.*/

/*Step 39*/
/*Well that did not work. Styling the p elements as inline-block and placing them on separate lines in the code creates an extra space to the right of the first p element, causing the second one to shift to the next line. One way to fix this is to make each p element's width a little less than 50%.*/

/*Change the width value to 49% for each class to see what happens.*/

/*Step 41*/
/*Now go ahead and change both the flavor and price class' widths to be 50% again.*/

/*.flavor {*/
/*    text-align: left;*/
/*    width: 50%*/
/*}*/

/*.price {*/
/*    text-align: right;*/
/*    width: 50%*/
/*}*/

/*Step 45*/
/*If you make the width of the page preview smaller, you will notice at some point, some of the text on the left starts wrapping around to the next line. This is because the width of the p elements on the left side can only take up 50% of the space.*/
/*Since you know the prices on the right have significantly fewer characters, change the flavor class width value to be 75% and the price class width value to be 25%.*/

/*Step 51*/
/*Something does not look right. You added the correct class attribute value to the p element with Donut as its text, but you have not defined a selector for it.*/

/*The CSS rule for the flavor class already sets the properties you want. Add the dessert class as an additional selector for this CSS rule.*/

.flavor, .dessert {
    text-align: left;
    width: 75%;
}

.price {
    text-align: right;
    width: 25%;
}

/*Step 55*/
/*Since all 4 sides of the menu have the same internal spacing, go ahead and delete the four properties and use a single padding property with the value 20px.*/
/*Step 56*/
/*The current width of the menu will always take up 80% of the body element's width. On a very wide screen, the coffee and dessert appear far apart from their prices.*/

/*Add a max-width property to the menu class with a value of 500px to prevent it from growing too wide.*/

.menu {
    width: 80%;
    max-width: 500px;
    background-color: burlywood;
    margin-left: auto;
    margin-right: auto;
    padding: 20px;
}
/*Step 58*/
/*It is a bit boring for all the text to have the same font-family. You can still have the majority of the text sans-serif and make just the h1 and h2 elements different using a different selector.*/

/*Style both the h1 and the h2 elements so that only these elements' text use Impact font.*/

/*Step 59*/
/*You can add a fallback value for the font-family by adding another font name separated by a comma. Fallbacks are used in instances where the initial is not found/available. */
/*                                                                                                                                                                  Add the fallback font serif after the Impact font.*/

h1, h2 {
    font-family: Impact, serif;
}
/*Step 60*/
/*Make the Est. 2020 text italicized by creating an established class selector and giving it the font-style property with the value italic.*/

.established {
    font-style: italic;
}
